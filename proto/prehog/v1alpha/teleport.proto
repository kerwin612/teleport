// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package prehog.v1alpha;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// a successful user login
//
// PostHog event: tp.user.login
message UserLoginEvent {
  // anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64;
  // should always be a real user as bots and service accounts with long-term
  // credentials don't ever login
  //
  // PostHog property: tp.user_name
  string user_name = 1;

  // type of the auth connector used in the login, should be
  // "local"/"github"/"saml"/"oidc"
  //
  // PostHog property: tp.connector_type
  string connector_type = 2;

  // anonymized device ID, empty or 32 bytes (HMAC-SHA-256) encoded in base64;
  // for logins where device trust is enabled
  //
  // PostHog property: tp.device_id
  string device_id = 3;
}

message SSOCreateEvent {
  // github/saml/oidc
  string connector_type = 1;
}

message ResourceCreateEvent {
  // TODO(espadolini): is a resource the teleport process or the
  // databases/desktops/kube clusters accessed through it?
  string resource_type = 1;

  // TODO(espadolini): flags for Discover, autodiscovery, join scripts?
}

// the kind of a "resource" as intended by ResourceHeartbeatEvent
enum ResourceKind {
  RESOURCE_KIND_UNSPECIFIED = 0;

  // PostHog property value: "node"
  RESOURCE_KIND_NODE = 1;

  // PostHog property value: "app_server"
  RESOURCE_KIND_APP_SERVER = 2;

  // PostHog property value: "kube_server"
  RESOURCE_KIND_KUBE_SERVER = 3;

  // PostHog property value: "db_server"
  RESOURCE_KIND_DB_SERVER = 4;

  // PostHog property value: "windows_desktop"
  RESOURCE_KIND_WINDOWS_DESKTOP = 5;

  // ServerV3 ("node") heartbeat with a subkind of "openssh" (as opposed to
  // empty or "teleport"); not used in keepalives
  //
  // PostHog property value: "node.openssh"
  RESOURCE_KIND_NODE_OPENSSH = 6;
}

// a heartbeat for a resource served by a Teleport instance outside of the
// control plane (i.e. not auth, not proxy)
//
// PostHog event: tp.resource.hb
message ResourceHeartbeatEvent {
  // anonymized name of the resource, 32 bytes (HMAC-SHA-256); the name is the
  // host ID for nodes but the actual user-facing name for other resources, so
  // an app or a database served by multiple agents won't be counted multiple
  // times
  //
  // PreHog property: tp.resource_name (in base64)
  bytes resource_name = 1;

  // kind of the resource (node, app, db)
  //
  // PostHog property: tp.resource_type (as a string, see ResourceKind)
  ResourceKind resource_kind = 2;

  // true if the heartbeat has no expiration
  //
  // PostHog property: tp.is_static
  bool static = 3;
}

// an event representing one of several audit events: session.start, port,
// app.session.start, db.session.start, windows.desktop.session.start; i.e. a
// SSH shell or port-forward, kubectl exec or kubectl port-forward, DB, App or
// Desktop connection
//
// an earlier encoding (as "tp.session.start") mixed SSH sessions and kubectl
// execs under a session type of "ssh"
//
// PostHog event: tp.session.start
message SessionStartEvent {
  // anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
  //
  // PostHog property: tp.user_name
  string user_name = 1;

  // type of the session, should be "ssh"/"k8s"/"db"/"app"/"desktop" (matching
  // the values for api/types.SessionKind) or "app_tcp", "ssh_port_v2" or
  // "k8s_port" for TCP Application Access connections, SSH port forwards and
  // kubectl port-forward respectively; a type of "ssh_port" represents either a
  // SSH port forwarding connection or a kubectl port-forward (not used in new
  // events)
  //
  // PostHog property: tp.session_type
  string session_type = 2;
}

// the issuance of a user certificate from the user CA
//
// PostHog event: tp.certificate.issued
message UserCertificateIssuedEvent {
  // anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64; it
  // can be the username of a bot user rather than of a regular user
  //
  // PostHog property: tp.user_name
  string user_name = 1;

  // the TTL of the issued certificate, typically 8 or 12 hours
  //
  // PostHog property: tp.ttl_minutes (in minutes, rounded up)
  google.protobuf.Duration ttl = 2;

  // If true, the certificate was requested by a bot (i.e. Machine ID) user.
  // PostHog property: tp.is_bot
  bool is_bot = 3;
  // If true, the certificate usage is restricted to database access.
  // PostHog property: tp.usage_database
  bool usage_database = 4;
  // If true, the certificate usage is restricted to app access.
  // PostHog property: tp.usage_app
  bool usage_app = 5;
  // If true, the certificate usage is restricted to Kubernetes access.
  // PostHog property: tp.usage_kubernetes
  bool usage_kubernetes = 6;
  // If true, the certificate usage is restricted to desktop access.
  // PostHog property: tp.usage_desktop
  bool usage_desktop = 7;
}

// UIBannerClickEvent is a usage event sent by the UI when the upgrade
// banner is clicked.
message UIBannerClickEvent {
  // anonymized
  string user_name = 1;
  // cluster alert name
  string alert = 2;
}

// UIOnboardCompleteGoToDashboardClickEvent is a UI event sent when initial
// registration is complete.
message UIOnboardCompleteGoToDashboardClickEvent {
  // anonymized
  string user_name = 1;
}

// UIOnboardAddFirstResourceClickEvent is a UI event sent when a user clicks the
// "add first resource" button.
message UIOnboardAddFirstResourceClickEvent {
  // anonymized
  string user_name = 1;
}

// UIOnboardAddFirstResourceLaterClickEvent is a UI event sent when a user
// clicks the "add first resource later" button.
message UIOnboardAddFirstResourceLaterClickEvent {
  // anonymized
  string user_name = 1;
}

// UIOnboardSetCredentialSubmitEvent is a UI event sent during registration when
// users configure their credentials.
message UIOnboardSetCredentialSubmitEvent {
  // anonymized
  string user_name = 1;
}

// UIOnboardRegisterChallengeSubmitEvent is a UI event sent during registration
// when the MFA challenge is completed.
message UIOnboardRegisterChallengeSubmitEvent {
  // anonymized
  string user_name = 1;
  string mfa_type = 2;
  string login_flow = 3;
}

// UIOnboardQuestionnaireSubmitEvent is a UI event sent during registration when
// user submits their onboarding questionnaire.
message UIOnboardQuestionnaireSubmitEvent {
  // anonymized
  string user_name = 1;
}

// UIRecoveryCodesContinueClickEvent is a UI event sent during
// registration when the user configures cluster recovery codes.
message UIRecoveryCodesContinueClickEvent {
  // anonymized
  string user_name = 1;
}

// UIRecoveryCodesCopyClickEvent is a UI event sent during
// registration when the user copies recovery codes.
message UIRecoveryCodesCopyClickEvent {
  // anonymized
  string user_name = 1;
}

// UIRecoveryCodesPrintClickEvent is a UI event sent during
// registration when the user prints recovery codes.
message UIRecoveryCodesPrintClickEvent {
  // anonymized
  string user_name = 1;
}

// DiscoverMetadata contains common metadata for Discover related events.
message DiscoverMetadata {
  // Uniquely identifies Discover wizard "session". Will allow to correlate
  // events within the same Discover wizard run.
  string id = 1;

  // anonymized
  string user_name = 2;

  // SSO indicates whether the user is from an SSO provider.
  bool sso = 3;
}

// DiscoverResource represents a resource type.
enum DiscoverResource {
  DISCOVER_RESOURCE_UNSPECIFIED = 0;
  DISCOVER_RESOURCE_SERVER = 1;
  DISCOVER_RESOURCE_KUBERNETES = 2;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED = 3;
  DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED = 4;
  DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED = 5;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS = 6;
  DISCOVER_RESOURCE_DATABASE_MYSQL_RDS = 7;
  DISCOVER_RESOURCE_APPLICATION_HTTP = 8;
  DISCOVER_RESOURCE_APPLICATION_TCP = 9;
  DISCOVER_RESOURCE_WINDOWS_DESKTOP = 10;
  DISCOVER_RESOURCE_DATABASE_SQLSERVER_RDS = 11;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT = 12;
  DISCOVER_RESOURCE_DATABASE_SQLSERVER_SELF_HOSTED = 13;
  DISCOVER_RESOURCE_DATABASE_REDIS_SELF_HOSTED = 14;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_GCP = 15;
  DISCOVER_RESOURCE_DATABASE_MYSQL_GCP = 16;
  DISCOVER_RESOURCE_DATABASE_SQLSERVER_GCP = 17;

  DISCOVER_RESOURCE_DATABASE_POSTGRES_REDSHIFT_SERVERLESS = 18;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_AZURE = 19;
  DISCOVER_RESOURCE_DATABASE_DYNAMODB = 20;
  DISCOVER_RESOURCE_DATABASE_CASSANDRA_KEYSPACES = 21;
  DISCOVER_RESOURCE_DATABASE_CASSANDRA_SELF_HOSTED = 22; // Cassandra & ScyllaDb
  DISCOVER_RESOURCE_DATABASE_ELASTICSEARCH_SELF_HOSTED = 23;
  DISCOVER_RESOURCE_DATABASE_REDIS_ELASTICACHE = 24; // Elasticache & MemoryDb
  DISCOVER_RESOURCE_DATABASE_REDIS_MEMORYDB = 25;
  DISCOVER_RESOURCE_DATABASE_REDIS_AZURE_CACHE = 26;
  DISCOVER_RESOURCE_DATABASE_REDIS_CLUSTER_SELF_HOSTED = 27;

  DISCOVER_RESOURCE_DATABASE_MYSQL_AZURE = 28;
  DISCOVER_RESOURCE_DATABASE_SQLSERVER_AZURE = 29;
  DISCOVER_RESOURCE_DATABASE_SQLSERVER_MICROSOFT = 30;
  DISCOVER_RESOURCE_DATABASE_COCKROACHDB_SELF_HOSTED = 31;
  DISCOVER_RESOURCE_DATABASE_MONGODB_ATLAS = 32;
  DISCOVER_RESOURCE_DATABASE_SNOWFLAKE = 33;

  DISCOVER_RESOURCE_DOC_DATABASE_RDS_PROXY = 34;
  DISCOVER_RESOURCE_DOC_DATABASE_HIGH_AVAILABILITY = 35;
  DISCOVER_RESOURCE_DOC_DATABASE_DYNAMIC_REGISTRATION = 36;

  DISCOVER_RESOURCE_SAML_APPLICATION = 37;
}

// DiscoverResourceMetadata contains common metadata identifying resource type being added.
message DiscoverResourceMetadata {
  // Resource type that is being added.
  DiscoverResource resource = 1;
}

// DiscoverStatus represents a Discover Step outcome.
enum DiscoverStatus {
  DISCOVER_STATUS_UNSPECIFIED = 0;
  // The user tried to complete the action and it succeeded.
  DISCOVER_STATUS_SUCCESS = 1;
  // The system skipped the step.
  // For example:
  // When setting up a Database and there's already a Database Service proxying the DB.
  // In this case the Database Agent installation is skipped.
  DISCOVER_STATUS_SKIPPED = 2;
  // The user tried to complete the action and it failed.
  DISCOVER_STATUS_ERROR = 3;
  // The user did not complete the action and left the wizard.
  DISCOVER_STATUS_ABORTED = 4;
}

// DiscoverStepStatus contains fields that track a particular step outcome,
// for example connection test failed or succeeded, or user aborted the step.
message DiscoverStepStatus {
  // Indicates the step outcome.
  DiscoverStatus status = 1;
  // Contains error details in case of Error Status.
  // We have to be careful to not include any identifyable infomation like server addresses here.
  string error = 2;
}

// UIDiscoverStartedEvent is emitted when the wizard opens.
message UIDiscoverStartedEvent {
  DiscoverMetadata metadata = 1;
  DiscoverStepStatus status = 2;
}

// UIDiscoverResourceSelectionEvent is emitted when user selected resource type to add
// and proceeded to the next step.
message UIDiscoverResourceSelectionEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverIntegrationAWSOIDCConnectEvent is emitted when a user is finished with the step
// that asks user to setup aws integration or select from a list of existing
// aws integrations.
message UIDiscoverIntegrationAWSOIDCConnectEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverDatabaseRDSEnrollEvent is emitted when a user is finished with
// the step that asks user to select from a list of RDS databases.
message UIDiscoverDatabaseRDSEnrollEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
  int64 selected_resources_count = 4;
}

// UIDiscoverDeployServiceEvent is emitted after the user installs a Teleport Agent.
// For SSH this is the Teleport 'install-node' script.
//
// For Kubernetes this is the teleport-agent helm chart installation.
//
// For Database Access this step is the installation of the teleport 'install-db' script.
// It can be skipped if the cluster already has a Database Service capable of proxying the database.
message UIDiscoverDeployServiceEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;

  // DeployMethod describes the method used to deploy a service.
  enum DeployMethod {
    // DEPLOY_METHOD_UNSPECIFIED means there was an existing service
    // so deploying step got skipped.
    DEPLOY_METHOD_UNSPECIFIED = 0;
    // DEPLOY_METHOD_AUTO means Teleport deployed a service for the user.
    DEPLOY_METHOD_AUTO = 1;
    // DEPLOY_METHOD_MANUAL means a user deployed a service by themselves.
    DEPLOY_METHOD_MANUAL = 2;
  }

  DeployMethod deploy_method = 4;

  // DeployType describes the type of deployment.
  enum DeployType {
    // DEPLOY_METHOD_UNSPECIFIED means there was an existing service
    // so deploying step got skipped.
    DEPLOY_TYPE_UNSPECIFIED = 0;
    // DEPLOY_TYPE_INSTALL_SCRIPT means service was deployed using an
    // install script.
    DEPLOY_TYPE_INSTALL_SCRIPT = 1;
    // DEPLOY_TYPE_AMAZON_ECS means service was deployed using amazon's
    // elastic container service.
    DEPLOY_TYPE_AMAZON_ECS = 2;
  }

  DeployType deploy_type = 5;
}

// UIDiscoverDatabaseRegisterEvent is emitted when a user is finished with the step that registers a database resource.
message UIDiscoverDatabaseRegisterEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverDatabaseConfigureMTLSEvent is emitted when a user is finished with the step that configures mutual TLS for a self-hosted database.
message UIDiscoverDatabaseConfigureMTLSEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverDesktopActiveDirectoryToolsInstallEvent is emitted when the user is finished with the step that asks user to run the install Active Directory tools script for the Desktop flow.
message UIDiscoverDesktopActiveDirectoryToolsInstallEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverDesktopActiveDirectoryConfigureEvent is emitted when the user is finished with the step that asks user to run the Configure Active Directory script for the Desktop flow.
message UIDiscoverDesktopActiveDirectoryConfigureEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverAutoDiscoveredResourcesEvent is emitted when the user is finished with the step that auto discovers resources (waiting until resources show up).
// resources_count field must reflect the latest amount of discovered resources (get the number after user is finished with this step).
message UIDiscoverAutoDiscoveredResourcesEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
  int64 resources_count = 4;
}

// UIDiscoverDatabaseConfigureIAMPolicyEvent is emitted when a user is finished with the step that configures IAM policy for an RDS database.
message UIDiscoverDatabaseConfigureIAMPolicyEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverPrincipalsConfigureEvent is emitted when a user is finished with the step that allows user to update their principals (setting up access).
message UIDiscoverPrincipalsConfigureEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverTestConnectionEvent emitted on the "Test Connection" screen
// when the user clicked tested connection to their resource.
message UIDiscoverTestConnectionEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// UIDiscoverCompletedEvent is emitted when user completes the Discover wizard.
message UIDiscoverCompletedEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

// RoleCreateEvent is emitted when user creates a custom role.
message RoleCreateEvent {
  // anonymized
  string user_name = 1;
  // anonymized
  string role_name = 2;
}

// BotCreateEvent is emitted when user creates a bot.
message BotCreateEvent {
  // user_name is the anonymized name of the user who created the bot
  string user_name = 1;
  // anonymized
  string bot_user_name = 2;
  // role_name is the anonymized name of the bot role that was created.
  string role_name = 3;
  // role_count is the number of roles that the bot role can impersonate on
  // creation.
  int64 role_count = 4;
  // join_method is the join method of the token associated with the bot on
  // creation.
  string join_method = 5;
  // bot_name is the anonymised name of the bot.
  string bot_name = 6;
}

// BotJoinEvent is emitted when a bot joins a Teleport cluster.
message BotJoinEvent {
  // bot_name is the anonymised name of the bot.
  string bot_name = 1;
  // join_method is the join method of the token associated with the bot on
  // creation. This will be the string value of `api/types.JoinMethod`.
  string join_method = 2;
  // join_token_name is the anonymised name of the token used to join
  // the cluster.
  string join_token_name = 3;
}

// UICreateNewRoleClickEvent is an event that can be triggered during custom role creation
message UICreateNewRoleClickEvent {
  //anonymized
  string user_name = 1;
}

// UICreateNewRoleSaveClickEvent is an event that can be triggered during custom role creation
message UICreateNewRoleSaveClickEvent {
  //anonymized
  string user_name = 1;
}

// UICreateNewRoleCancelClickEvent is an event that can be triggered during custom role creation
message UICreateNewRoleCancelClickEvent {
  //anonymized
  string user_name = 1;
}

// UICreateNewRoleViewDocumentationClickEvent is an event that can be triggered during custom role creation
message UICreateNewRoleViewDocumentationClickEvent {
  //anonymized
  string user_name = 1;
}

// UICallToActionClickEvent is a click in a Teleport Web UI's CTA
message UICallToActionClickEvent {
  //anonymized
  string user_name = 1;
  CTA cta = 2;
}

// CTA represents teleport web UI's call to action buttons
enum CTA {
  CTA_UNSPECIFIED = 0;
  CTA_AUTH_CONNECTOR = 1;
  CTA_ACTIVE_SESSIONS = 2;
  CTA_ACCESS_REQUESTS = 3;
  CTA_PREMIUM_SUPPORT = 4;
  CTA_TRUSTED_DEVICES = 5;
  CTA_UPGRADE_BANNER = 6;
  CTA_BILLING_SUMMARY = 7;
}

// a request forwarded to a kube cluster's API server (other than exec and
// port-forward)
//
// PostHog event: tp.kube.request
message KubeRequestEvent {
  // anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
  //
  // PostHog property: tp.user_name
  string user_name = 1;
}

// an sftp event, represents a single operation on a file
//
// PostHog event: tp.sftp
message SFTPEvent {
  // anonymized Teleport username, 32 bytes (HMAC-SHA-256) encoded in base64
  //
  // PostHog property: tp.user_name
  string user_name = 1;
  // matching SFTPAction in teleport/api/types/events/events.proto
  int32 action = 2;
}

message AgentMetadataEvent {
  string version = 1;
  string host_id = 2;
  repeated string services = 3;
  string os = 4;
  string os_version = 5;
  string host_architecture = 6;
  string glibc_version = 7;
  repeated string install_methods = 8;
  string container_runtime = 9;
  string container_orchestrator = 10;
  string cloud_environment = 11;
}

// AssistCompletionEvent is an event that is emitted
// when a single completion occurs in the Teleport Assist,
// i.e. a user submits a prompt, and receives an answer from the Assist
message AssistCompletionEvent {
  // anonymized
  string user_name = 1;

  // ConversationId is the UUID that identifies a single Assist conversation
  string conversation_id = 2;

  // TotalTokens is the total amount of token used to satisfy this request
  int64 total_tokens = 3;
  // PromptTokens is the amount of estimated tokens used by the prompt
  int64 prompt_tokens = 4;
  // CompletionTokens is the amount of tokens that the completion response consists of
  int64 completion_tokens = 5;
}

// IntegrationEnrollKind represents the types of integration that
// can be enrolled.
enum IntegrationEnrollKind {
  INTEGRATION_ENROLL_KIND_UNSPECIFIED = 0;
  INTEGRATION_ENROLL_KIND_SLACK = 1;
  INTEGRATION_ENROLL_KIND_AWS_OIDC = 2;
  INTEGRATION_ENROLL_KIND_PAGERDUTY = 3;
  INTEGRATION_ENROLL_KIND_EMAIL = 4;
  INTEGRATION_ENROLL_KIND_JIRA = 5;
  INTEGRATION_ENROLL_KIND_DISCORD = 6;
  INTEGRATION_ENROLL_KIND_MATTERMOST = 7;
  INTEGRATION_ENROLL_KIND_MS_TEAMS = 8;
  INTEGRATION_ENROLL_KIND_OPSGENIE = 9;
  INTEGRATION_ENROLL_KIND_OKTA = 10;
  INTEGRATION_ENROLL_KIND_JAMF = 11;
}

// IntegrationEnrollMetadata contains common metadata
// for Integration Enroll related events.
message IntegrationEnrollMetadata {
  // id is used as a unique identifier to correlate events within the
  // same enroll wizard run.
  string id = 1;
  // kind identifies what type of integration the user clicked on to enroll.
  IntegrationEnrollKind kind = 2;
  // user_name is anonymized.
  string user_name = 3;
}

// UIIntegrationEnrollEvent is an event that is emitted when a user
// clicks on a integration to enroll.
message UIIntegrationEnrollStartEvent {
  IntegrationEnrollMetadata metadata = 1;
}

// UIIntegrationEnrollEvent is an event that is emitted when a user
// completed enrolling an integration.
message UIIntegrationEnrollCompleteEvent {
  IntegrationEnrollMetadata metadata = 1;
}

// EditorChangeEvent is an event that is emitted when a user role set changes resulting in
// a editor role being added on removed
message EditorChangeEvent {
  // anonymized user name
  string user_name = 1;
  EditorChangeStatus status = 2;
}

// EditorChangeStatus is the possible value of an EditorChangeEvent event status
enum EditorChangeStatus {
  EDITOR_CHANGE_STATUS_UNSPECIFIED = 0;
  // Status when the editor role is granted
  EDITOR_CHANGE_STATUS_ROLE_GRANTED = 1;
  // Status when the editor role is removed
  EDITOR_CHANGE_STATUS_ROLE_REMOVED = 2;
}

message SubmitEventRequest {
  // anonymized, 32 bytes (HMAC-SHA-256) encoded in base64
  //
  // PostHog property: tp.cluster_name (still in base64)
  string cluster_name = 1;

  // optional, will default to the ingest time if unset
  //
  // PostHog timestamp
  google.protobuf.Timestamp timestamp = 2;

  // the event being submitted
  oneof event {
    UserLoginEvent user_login = 3;
    SSOCreateEvent sso_create = 4;
    ResourceCreateEvent resource_create = 5;

    // REMOVE IN V14: Use session_start_v2 instead
    SessionStartEvent session_start = 6;

    UIBannerClickEvent ui_banner_click = 7;
    UIOnboardCompleteGoToDashboardClickEvent ui_onboard_complete_go_to_dashboard_click = 9;
    UIOnboardAddFirstResourceClickEvent ui_onboard_add_first_resource_click = 10;
    UIOnboardAddFirstResourceLaterClickEvent ui_onboard_add_first_resource_later_click = 11;
    UIOnboardSetCredentialSubmitEvent ui_onboard_set_credential_submit = 12;
    UIOnboardRegisterChallengeSubmitEvent ui_onboard_register_challenge_submit = 13;
    UIRecoveryCodesContinueClickEvent ui_recovery_codes_continue_click = 14;
    UIRecoveryCodesCopyClickEvent ui_recovery_codes_copy_click = 15;
    UIRecoveryCodesPrintClickEvent ui_recovery_codes_print_click = 16;

    UIDiscoverStartedEvent ui_discover_started_event = 17;
    UIDiscoverResourceSelectionEvent ui_discover_resource_selection_event = 18;

    UserCertificateIssuedEvent user_certificate_issued_event = 19;

    // Note: semantics of SessionStartEvent type values have changed to
    // differentiate SSH from Kubernetes exec sessions (as well as adding
    // db/app/desktop events). The structures are the same, however, so we don't
    // need a new message type.
    SessionStartEvent session_start_v2 = 20;

    UIDiscoverDeployServiceEvent ui_discover_deploy_service_event = 21;
    UIDiscoverDatabaseRegisterEvent ui_discover_database_register_event = 22;
    UIDiscoverDatabaseConfigureMTLSEvent ui_discover_database_configure_mtls_event = 23;
    UIDiscoverDesktopActiveDirectoryToolsInstallEvent ui_discover_desktop_active_directory_tools_install_event = 24;
    UIDiscoverDesktopActiveDirectoryConfigureEvent ui_discover_desktop_active_directory_configure_event = 25;
    UIDiscoverAutoDiscoveredResourcesEvent ui_discover_auto_discovered_resources_event = 26;
    UIDiscoverDatabaseConfigureIAMPolicyEvent ui_discover_database_configure_iam_policy_event = 27;
    UIDiscoverPrincipalsConfigureEvent ui_discover_principals_configure_event = 28;
    UIDiscoverTestConnectionEvent ui_discover_test_connection_event = 29;
    UIDiscoverCompletedEvent ui_discover_completed_event = 30;

    RoleCreateEvent role_create = 31;

    UICreateNewRoleClickEvent ui_create_new_role_click = 32;
    UICreateNewRoleSaveClickEvent ui_create_new_role_save_click = 33;
    UICreateNewRoleCancelClickEvent ui_create_new_role_cancel_click = 34;
    UICreateNewRoleViewDocumentationClickEvent ui_create_new_role_view_documentation_click = 35;

    KubeRequestEvent kube_request = 36;
    SFTPEvent sftp = 37;
    AgentMetadataEvent agent_metadata_event = 38;
    ResourceHeartbeatEvent resource_heartbeat = 39;

    UIDiscoverIntegrationAWSOIDCConnectEvent ui_discover_integration_aws_oidc_connect_event = 40;
    UIDiscoverDatabaseRDSEnrollEvent ui_discover_database_rds_enroll_event = 41;

    UICallToActionClickEvent ui_call_to_action_click_event = 42;

    AssistCompletionEvent assist_completion = 43;

    UIIntegrationEnrollStartEvent ui_integration_enroll_start_event = 44;
    UIIntegrationEnrollCompleteEvent ui_integration_enroll_complete_event = 45;

    EditorChangeEvent editor_change_event = 46;

    BotCreateEvent bot_create = 47;

    UIOnboardQuestionnaireSubmitEvent ui_onboard_questionnaire_submit = 48;

    BotJoinEvent bot_join = 49;
  }

  reserved 8; // UIOnboardGetStartedClickEvent
  reserved "ui_onboard_get_started_click";
}
message SubmitEventResponse {}

message SubmitEventsRequest {
  // individual events to be submitted in a batch, up to 500 at once
  repeated SubmitEventRequest events = 1;
}
message SubmitEventsResponse {}

message HelloTeleportRequest {}
message HelloTeleportResponse {}

service TeleportReportingService {
  // equivalent to SubmitEvents with a single event, should be unused by now
  rpc SubmitEvent(SubmitEventRequest) returns (SubmitEventResponse) {
    option deprecated = true;
  }

  // encodes and forwards usage events to the PostHog event database; each
  // event is annotated with some properties that depend on the identity of the
  // caller:
  // - tp.account_id (UUID in string form, can be empty if missing from the
  //   license)
  // - tp.license_name (should always be a UUID)
  // - tp.license_authority (name of the authority that signed the license file
  //   used for authentication)
  // - tp.is_cloud (boolean)
  rpc SubmitEvents(SubmitEventsRequest) returns (SubmitEventsResponse) {}

  rpc HelloTeleport(HelloTeleportRequest) returns (HelloTeleportResponse) {}
}
